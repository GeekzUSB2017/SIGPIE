(dp1
S'output'
p2
S"<type 'exceptions.UnboundLocalError'> local variable 'the_page' referenced before assignment"
p3
sS'layer'
p4
S'/home/julio/git/SIGPIE/applications/SIGPIE/controllers/home.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n\n\ndef index():\n    return dict()\n\ndef about():\n    return dict()\n\n\ndef postularse():\n    return dict()\n\n\ndef user():\n    return dict(login=auth.login())\n\ndef register():\n    return dict(form=auth.register())\n\n# URLS DE RETORNO PARA EL CAS ##\n# PARA EL SERVIDOR:\n# PARA DESSARROLLO. Cambiar el puerto 8000 si es necesario.\nURL_RETORNO = "http%3A%2F%2Flocalhost%3A8000%2FSIGPIE%2Fhome%2Flogin_cas"\n\n# FUNCIONES USUARIO\n\ndef login_cas():\n    if not request.vars.getfirst(\'ticket\'):\n        #redirect(URL(\'error\'))\n        pass\n    try:\n        import urllib2, ssl\n        ssl._create_default_https_context = ssl._create_unverified_context\n\n        url = "https://secure.dst.usb.ve/validate?ticket="+\\\n        request.vars.getfirst(\'ticket\') + "&service=" + URL_RETORNO\n\n\n        req = urllib2.Request(url)\n        response = urllib2.urlopen(req)\n        the_page = response.read()\n\n    except Exception, e:\n        print "Exception: "\n        print e\n        # redirect(URL(\'error\'))\n\n    if the_page[0:2] == "no":\n        pass\n    else:\n        # session.casticket = request.vars.getfirst(\'ticket\')\n        data  = the_page.split()\n        usbid = data[1]\n\n        usuario = get_ldap_data(usbid) #Se leen los datos del CAS\n\n        tablaUsuarios = db.estudiante\n\n        session.usuario = usuario\n        session.usuario[\'usbid\'] = usbid\n        try:\n            print usuario[\'carrera\']\n        except:\n            print(\'Es una esceocion\')\n        if not db(tablaUsuarios.carnet == usbid).isempty():\n            datosUsuario = db(tablaUsuarios.usbid==usbid).select()[0]\n\n            db.USUARIO.insert(cedula=session.usuario["cedula"],  # Lo insertamos en la base de datos.\n            usbid=session.usuario["usbid"],\n            nombre=session.usuario["first_name"],\n            apellido=session.usuario["last_name"],\n            telefono_habitacion=session.usuario["phone"])\n\n\n\n            redirect(URL(\'about\'))\n\ndef logout_cas():\n    session.usuario = None\n    return response.render()\n\n\n\n\n\nimport ldap\nimport string\nimport random\n\n# Requiere:\n# sudo apt-get install libsasl2-dev python-dev libldap2-dev libssl-dev ldap-utils\n# pip install ldap\n\ndef get_ldap_data(usbid):\n    def getFirst(maybeList):\n        # Evitar excepcion de index no encontrado\n        if type(maybeList)==list and len(maybeList)>0:\n            return maybeList[0]\n        else:\n            return None\n\n    user = {}\n    l    = ldap.open("ldap.usb.ve")\n    searchScope        = ldap.SCOPE_SUBTREE\n    retrieveAttributes = None #Traemos todos los atributos\n    baseDN = "ou=People,dc=usb,dc=ve"\n    searchFilter = "uid=*"+usbid+"*"\n    ldap_result_id = l.search(baseDN,searchScope,searchFilter,retrieveAttributes)\n    result_type, consulta = l.result(ldap_result_id, 0)\n    datos = consulta[0][1]\n\n    # print datos\n\n    # Extraer datos evitando campos inexistentes\n    user[\'first_name\'] = getFirst(datos.get(\'givenName\'))\n    user[\'last_name\']  = getFirst(datos.get(\'sn\'))\n    user[\'email\']      = getFirst(datos.get(\'mail\'))\n    user[\'cedula\']     = getFirst(datos.get(\'personalId\'))\n    user[\'phone\']      = getFirst(datos.get(\'mobile\'))\n    user_type          = getFirst(datos.get(\'gidNumber\'))\n\n    if user_type == "1000":\n        user[\'tipo\'] = "Docente"\n        user[\'dpto\'] = getFirst(datos.get(\'department\'))\n    elif user_type == "1002":\n        user[\'tipo\'] = "Empleado"\n    elif user_type == "1003":\n        user[\'tipo\'] = "Organizaci\xc3\xb3n"\n    elif user_type == "1004":\n        user[\'tipo\'] = "Pregrado"\n        user[\'carrera\'] = getFirst(datos.get(\'career\'))\n    elif user_type == "1006":\n        user[\'tipo\'] = "Postgrado"\n        user[\'carrera\'] = getFirst(datos.get(\'career\'))\n    elif user_type == "1007":\n        user[\'tipo\'] = "Egresado"\n    elif user_type == "1008":\n        user[\'tipo\'] = "Administrativo"\n\n    return user\n\ndef random_key():\n    return \'\'.join(random.choice(string.ascii_uppercase) for _ in range(20))\n\n\n\n\nif __name__ == "__main__":\n\tlogin_cas()\nresponse._vars=response._caller(login_cas)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/julio/git/SIGPIE/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/julio/git/SIGPIE/applications/SIGPIE/controllers/home.py", line 152, in <module>\n  File "/home/julio/git/SIGPIE/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/julio/git/SIGPIE/applications/SIGPIE/controllers/home.py", line 50, in login_cas\n    if the_page[0:2] == "no":\nUnboundLocalError: local variable \'the_page\' referenced before assignment\n'
p11
s.